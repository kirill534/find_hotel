import handlers
import keyboards.inline.number_buttons
import parser
import utils
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot import types
from telebot.types import Dict
from loader import bot
from loguru import logger
from telebot.types import CallbackQuery
from states.user_states import UserInputState


def buttons_info(message: types.Message, data: Dict) -> None:
    """
    –í—ã–∑–æ–≤ –≤ —á–∞—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    : param message : Message
    : return : None
    """
    global button_row

    logger.info('–í—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
    data['flag_checking'] = True

    city_button = InlineKeyboardButton(
        text=f'üåá –ì–æ—Ä–æ–¥: {data["city"]}', callback_data="city"
    )
    data_button = InlineKeyboardButton(
        text=f'üìÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª {data["checkInDate"]["day"]}-'
             f'{data["checkInDate"]["month"]}-{data["checkInDate"]["year"]} / {data["checkOutDate"]["day"]}-'
             f'{data["checkOutDate"]["month"]}-{data["checkOutDate"]["year"]}',
        callback_data="interval_data",
    )
    quantity_hotel_button = InlineKeyboardButton(
        text=f'üè® –û—Ç–µ–ª–µ–π: {data["quantity_hotels"]}', callback_data="qntt_htl"
    )
    need_photo = InlineKeyboardButton(
        text=f'üì∑ –§–æ—Ç–æ: {data["photo_need"]}', callback_data="pht_nd"
    )
    quantity_photo_button = InlineKeyboardButton(
        text=f'–ö–æ–ª-–≤–æ —Ñ–æ—Ç–æ: {data["photo_count"]}', callback_data="qntt_pht"
    )
    settings_button = InlineKeyboardButton(
        text=f'üí∞ –í–∞–ª—é—Ç–∞: {data["currencies_sign"]}'
             f' {"üßëüèº" * int(data["adults"])} –≤–∑—Ä–æ—Å–ª—ã—Ö. {"üë∂üèº" * int(data["quantity_children"])} –¥–µ—Ç–µ–π',
        callback_data="sttngs"
    )
    save_button = InlineKeyboardButton(
        text=f'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å: {data["save_info"]}', callback_data="save"
    )
    continue_button = InlineKeyboardButton(text="üîé –ù–∞–π—Ç–∏", callback_data="continue")

    if data["command_buttons"].startswith("bestdeal"):
        price_hotel = InlineKeyboardButton(
            text=f"üí∞ –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: "
                 f'{currency_transfer(data, data["price_min"])} - '
                 f'{currency_transfer(data, data["price_max"])} '
                 f'{data["currencies_sign"]}',
            callback_data="prc_htl",
        )
        distance_to_center = InlineKeyboardButton(
            text=f'üöï –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {round(data["landmark_in"] * 1.6093, 2)} - '
                 f'{round(data["landmark_out"] * 1.6093, 2)} –∫–º',
            callback_data="distance",
        )

        if data["photo_need"] == "–¥–∞":
            button_row = (
                InlineKeyboardMarkup()
                .add(city_button)
                .add(data_button)
                .row(quantity_hotel_button, need_photo, quantity_photo_button)
                .add(price_hotel)
                .add(distance_to_center)
                .add(settings_button)
                .add(save_button)
                .add(continue_button)
            )
        else:
            button_row = (
                InlineKeyboardMarkup()
                .add(city_button)
                .add(data_button)
                .row(quantity_hotel_button, need_photo)
                .add(price_hotel)
                .add(distance_to_center)
                .add(settings_button)
                .add(save_button)
                .add(continue_button)
            )

    elif data["command_buttons"].startswith(("lowprice", "highprice")):
        if data["photo_need"] == "–¥–∞":
            button_row = (
                InlineKeyboardMarkup()
                .add(city_button)
                .add(data_button)
                .row(quantity_hotel_button, need_photo, quantity_photo_button)
                .add(settings_button)
                .add(save_button)
                .add(continue_button)
            )
        else:
            button_row = (
                InlineKeyboardMarkup()
                .add(city_button)
                .add(data_button)
                .row(quantity_hotel_button, need_photo)
                .add(settings_button)
                .add(save_button)
                .add(continue_button)
            )

    bot.send_message(message.chat.id, text=f"–¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å - {data['command_buttons']}. –í—Å—ë –≤–µ—Ä–Ω–æ?",
                     reply_markup=button_row)


@bot.callback_query_handler(func=lambda call: call.data.startswith(('city', 'interval_data', 'qntt_htl', 'pht_nd',
                                                                    'qntt_pht', 'prc_htl', 'distance', 'sttngs', 'save',
                                                                    'continue')))
def commands_callback(call: CallbackQuery) -> None:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É 'city'/'interval_data'/'qntt_htl'/'pht_nd',/
                                'qntt_pht'/'prc_htl'/'distance'/'sttngs'/'continue'

    : param call: 'city'/'interval_data'/'qntt_htl'/'pht_nd',/
    'qntt_pht'/'prc_htl'/'distance'/'sttngs'/,'save'/'continue'
    : return : None
    """

    logger.info('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: ' + call.data)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    with bot.retrieve_data(call.message.chat.id) as data:
        if call.data == "qntt_htl":
            keyboards.inline.number_buttons.buttons_number(call.message)

        elif call.data == "city":
            bot.set_state(call.message.chat.id, UserInputState.input_city)
            bot.send_message(
                call.message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –æ—Ç–µ–ª—å: "
            )

        elif call.data == "interval_data":
            del data["checkInDate"]
            handlers.custom_handlers.user_commands.my_calendar(call.message, "–∑–∞–µ–∑–¥–∞")

        elif call.data == "pht_nd":
            data["photo_need"] = "–Ω–µ—Ç" if data["photo_need"] == "–¥–∞" else "–¥–∞"
            if data["photo_need"] == "–¥–∞":
                data["photo_count"] = 1
            else:
                data["photo_count"] = 0
            keyboards.inline.check_info.buttons_info(call.message, data)

        elif call.data == "qntt_pht":
            bot.set_state(call.message.chat.id, UserInputState.photo_count)
            bot.send_message(
                call.message.chat.id, text="–°–∫–æ–ª—å–∫–æ –≤—ã–≤–µ—Å—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π? –û—Ç 1 –¥–æ 10!"
            )

        elif call.data == "prc_htl":
            data["old_currencies"] = data["currencies"]
            bot.set_state(call.message.chat.id, UserInputState.priceMin)
            bot.send_message(
                call.message.chat.id,
                text=f'–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–µ–ª—è –≤ {data["currencies_sign"]}.',
            )

        elif call.data == "distance":
            bot.set_state(call.message.chat.id, UserInputState.landmarkIn)
            bot.send_message(
                call.message.chat.id,
                text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ (–æ—Ç 0 –∫–º).",
            )

        elif call.data == "sttngs":
            keyboards.inline.settings_buttons.show_buttons_settings(
                call.message, data
            )

        elif call.data == "save":
            data["save_info"] = "–ù–µ—Ç" if data["save_info"] == "–î–∞" else "–î–∞"
            keyboards.inline.check_info.buttons_info(call.message, data)

        elif call.data == "continue":
            data["flag_checking"] = False
            bot.send_message(call.message.chat.id, text="–ò–¥—ë—Ç –ø–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ—Ç–µ–ª–µ–π.....")
            utils.find_hotel.find_and_show_hotels(call.message, data)

        else:
            bot.send_message(
                call.message.chat.id, text="–û—à–∏–±–∫–∞! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É"
            )


def currency_transfer(data, price) -> float:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—â–∞—è –≤–∞–ª—é—Ç—É, –µ—Å–ª–∏ –≤–∞–ª—é—Ç–∞ —Ä–∞–∑–Ω–∞—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –Ω—É–∂–Ω—É—é
    :param data: Dict –¥–∞–Ω–Ω—ã–µ, —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param price: float —Ü–µ–Ω–∞
    :return: float –Ω–æ–≤–∞—è —Ü–µ–Ω–∞
    """
    if data["old_currencies"] == data["currencies"]:
        return price
    return round(
        parser.conventer.convert_currency_xe(
            data["old_currencies"].upper(), data["currencies"].upper(), price), 2,
    )
